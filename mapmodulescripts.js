// Import the functions you need from the SDKs you need
import { initializeApp } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-app.js";
import { getDatabase, ref, onValue, set} from "https://www.gstatic.com/firebasejs/9.15.0/firebase-database.js";

const firebaseConfig = {
    apiKey: "AIzaSyDJSAldp6B4y6dQTEXmwQ-3TnX54jRsLsU",
    authDomain: "patrolling-91471.firebaseapp.com",
    databaseURL: "https://patrolling-91471-default-rtdb.firebaseio.com",
    projectId: "patrolling-91471",
    storageBucket: "patrolling-91471.appspot.com",
    messagingSenderId: "724671694445",
    appId: "1:724671694445:web:ec44063d2524aea192a164"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const database = getDatabase(app);

let mapOptions = {
    zoomControl: false,
    zoomSnap: 0.5,
    maxZoom: 15
}

const svgIcon = L.divIcon({
    html: `
    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="margin: auto; display: block; shape-rendering: auto;" width="40px" height="40px" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid">
<circle cx="50" cy="50" r="0" fill="none" stroke="#f71010" stroke-width="20">
  <animate attributeName="r" repeatCount="indefinite" dur="1.282051282051282s" values="0;30" keyTimes="0;1" keySplines="0 0.2 0.8 1" calcMode="spline" begin="0s"></animate>
  <animate attributeName="opacity" repeatCount="indefinite" dur="1.282051282051282s" values="1;0" keyTimes="0;1" keySplines="0.2 0 0.8 1" calcMode="spline" begin="0s"></animate>
</circle><circle cx="50" cy="50" r="0" fill="none" stroke="#1b00ff" stroke-width="20">
  <animate attributeName="r" repeatCount="indefinite" dur="1.282051282051282s" values="0;30" keyTimes="0;1" keySplines="0 0.2 0.8 1" calcMode="spline" begin="-0.641025641025641s"></animate>
  <animate attributeName="opacity" repeatCount="indefinite" dur="1.282051282051282s" values="1;0" keyTimes="0;1" keySplines="0.2 0 0.8 1" calcMode="spline" begin="-0.641025641025641s"></animate>
</circle>
<!-- [ldio] generated by https://loading.io/ --></svg>`,
    className: "",
    iconSize: [24, 40],
    popupAnchor: [0, -10],
    // iconAnchor: [12, 40],
});

let map = new L.map('map', mapOptions)
L.control.zoom({
    position: 'bottomright'
}).addTo(map);

let layer = new L.tileLayer('http://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}', {
    maxZoom: 20,
    subdomains: ['mt0', 'mt1', 'mt2', 'mt3']
});
map.addLayer(layer)

// var CartoDB_DarkMatter = L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
//     attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
//     subdomains: 'abcd',
//     maxZoom: 19
// });
// CartoDB_DarkMatter.addTo(map);

// // Google Map Layer

// var googleStreets = L.tileLayer('http://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}', {
//     maxZoom: 20,
//     subdomains: ['mt0', 'mt1', 'mt2', 'mt3']
// });
// googleStreets.addTo(map);

// // Satelite Layer
// var googleSat = L.tileLayer('http://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}', {
//     maxZoom: 20,
//     subdomains: ['mt0', 'mt1', 'mt2', 'mt3']
// });
// googleSat.addTo(map);

// var Stamen_Watercolor = L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/watercolor/{z}/{x}/{y}.{ext}', {
//     attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
//     subdomains: 'abcd',
//     minZoom: 1,
//     maxZoom: 16,
//     ext: 'jpg'
// });
// Stamen_Watercolor.addTo(map);


$("body").on('click', '.bright', function () {
    // alert('hello');
    var googleStreets = L.tileLayer('http://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}', {
        maxZoom: 20,
        subdomains: ['mt0', 'mt1', 'mt2', 'mt3']
    });
    googleStreets.addTo(map);
});

$("body").on('click', '.dark', function () {
    let layer = L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
        subdomains: 'abcd',
        maxZoom: 20
    });
    map.addLayer(layer)
});

const db = getDatabase();
// const locationsRef = ref(db, 'LocationsList');

// onValue(locationsRef, (snapshot) => {
//     const data = snapshot.val();
//     console.log(data);
//     // Process the data here, such as displaying it in your application
// }, (error) => {
//     console.error(error);
// });
var vehicles = [];
const usersLocation = ref(db, 'User');
onValue(usersLocation, (snapshot) => {
    const data = snapshot.val();
    vehicles = [];
    document.getElementById("searchlist").innerHTML = '';
    Object.keys(data).forEach(element => {
        const vehicle = data[element];
        vehicle.id = element; // Add 'id' property to each vehicle object
        vehicles.push(vehicle);
    });
    updateLocation();
    console.log(vehicles);
});

var markersonchart = []
var cities = L.layerGroup(markersonchart);
var showall = true
$('#sidepanelhighway1').click(function () { showonly('nh-102'); });
$('#sidepanelhighway2').click(function () { showonly('nh-2'); });
$('#sidepanelhighway3').click(function () { showonly('nh-37'); });

$('#ShowAll').click(function () { showall = true; updateLocation(); });

function showonly(para) {
    showall = false
    var latlon = []
    markersonchart.forEach(element => {
        map.removeLayer(element)
    });
    vehicles.forEach(element => {
        if (Object.values(element).join(' ').toLowerCase().includes(para.toLowerCase())) {
            console.log(element["lat"], element["lng"])
            latlon.push([element["lat"], element["lng"]])
            var marker = L.marker([element["lat"], element["lng"]], { icon: svgIcon }).addTo(map).
                bindPopup("<b>Vehicle Number : </b>" + element["carNumber"].toUpperCase() + '<br>' + "<b>Highway Number : </b>" + element["highwayNumber"] + '<br>' + "<b>Phone  : </b>" + element["phoneNumber"] + '<br>' + "<b>Police Incharge Name : </b>" + element["policeInChargeName"] + '<br>' + "<b>Sector Number : </b>" + element["sectorNumber"] + '<br>' + "<b>Time : </b>" + moment(element["time"]).format('Do MMM YYYY h:mm:ss a') + '<br>' + "<b>Zone : </b>" + element["zoneNumber"] + '<br> <a href="history.html?vehicle=' + element["carNumber"] + '">View History</a>' + element)
                .openPopup();
            markersonchart.push(marker);
        }

    });
    var bounds = new L.LatLngBounds(latlon).extend();
    map.fitBounds(bounds);
}

function updateLocation() {
    if (showall == true) {
        var latlon = []
        markersonchart.forEach(element => {
            map.removeLayer(element)
        });

        vehicles.forEach(element => {
            console.log(element["lat"], element["long"])
            latlon.push([element["lat"], element["long"]])
            var marker = L.marker([element["lat"], element["long"]], { icon: svgIcon }).addTo(map).
                bindPopup("<b>Name : </b>" + element["Name"].toUpperCase() + '<br>'
                    + "<b>Nobile Number : </b>" + element["MobileNumber"] + '<br>'
                    + "<b>Police Station  : </b>" + element["PoliceStation"] + '<br>'
                    + "<b>Nature of Duty : </b>" + element["NatureofDuty"] + '<br>'
                    + "<b>Area Allocated : </b>" + element["AreaAllocated"] + '<br>'
                    + "<b>Unit : </b>" + element["Unit"] + '<br>'
                    + "<b>Time : </b>" + moment(element["timestamp"]).format('Do MMM YYYY h:mm:ss a') +
                    '<br> <a href="history.html?vehicle=' + element["id"] + '">View History</a>' +
                    '<br> <a class="livechat" href="#" data-id="' + element["id"] + '">Live Chat</a>')
                .openPopup();
            markersonchart.push(marker);

        });
        var bounds = new L.LatLngBounds(latlon).extend();
        map.fitBounds(bounds);
    }

}


$("body").on("focus", "#searchinput", function () {
    $('.searchlist').removeClass("d-none");
    console.log($('#searchinput').val().length)
    if ($('#searchinput').val().length > 0) {
        console.log($('#searchinput').val())
        addtosearchlist($('#searchinput').val())
    } else {
        $('.searchlist').removeClass("d-none");
        vehicles.forEach(element => {
            if ($('#' + element["Name"].toUpperCase())[0]) {
                document.getElementById.innerHTML = "<b>Name : </b>" + element["Name"].toUpperCase() + '<br>'
                    + "<b>Nobile Number : </b>" + element["MobileNumber"] + '<br>'
                    + "<b>Police Station  : </b>" + element["PoliceStation"] + '<br>'
                    + "<b>Nature of Duty : </b>" + element["NatureofDuty"] + '<br>'
                    + "<b>Area Allocated : </b>" + element["AreaAllocated"] + '<br>'
                    + "<b>Unit : </b>" + element["Unit"] + '<br>'
                    + "<b>Time : </b>" + moment(element["timestamp"]).format('Do MMM YYYY h:mm:ss a') +
                    '<br> <a href="history.html?vehicle=' + element["id"] + '">View History</a>' +
                    '<br> <a class="livechat" href="#" data-id="' + element["id"] + '">Live Chat</a>' + '<hr> '
            } else {
                var div = document.createElement('div');
                div.innerHTML = "<b>Name : </b>" + element["Name"].toUpperCase() + '<br>'
                    + "<b>Nobile Number : </b>" + element["MobileNumber"] + '<br>'
                    + "<b>Police Station  : </b>" + element["PoliceStation"] + '<br>'
                    + "<b>Nature of Duty : </b>" + element["NatureofDuty"] + '<br>'
                    + "<b>Area Allocated : </b>" + element["AreaAllocated"] + '<br>'
                    + "<b>Unit : </b>" + element["Unit"] + '<br>'
                    + "<b>Time : </b>" + moment(element["timestamp"]).format('Do MMM YYYY h:mm:ss a') +
                    '<br> <a href="history.html?vehicle=' + element["id"] + '">View History</a>' +
                    '<br> <a class="livechat" href="#" data-id="' + element["id"] + '">Live Chat</a>' + '<hr> '
                div.setAttribute("id", element["Name"].toUpperCase());
                div.setAttribute("class", "pointerclass");
                document.getElementById("searchlist").appendChild(div);
            }
        });
    }
});

var focusflag = false;

$('.searchlist').click(function () { focusflag = true; });
// $('div.stop').click(function () { $('div.box').stop(); });
$("#searchinput").focusout(function () {
    setTimeout(
        function () {
            if (!focusflag)
                $('.searchlist').addClass("d-none");
        },
        200);

});

$(".searchlist").on("click", "div", function (event) {
    focusflag = true;
    showonly($(this).attr('id').toLowerCase())
    $('.searchlist').addClass("d-none");
});

$(".pointerclass").click(function () {
    alert("You clicked on li " + $(this).text());
});

$("#searchinput").keyup(function () {
    addtosearchlist($('#searchinput').val())
    // console.log();
});

function addtosearchlist(para) {
    focusflag = false;
    $('.searchlist').removeClass("d-none");
    // console.log('fuc called')
    document.getElementById("searchlist").innerHTML = '';
    vehicles.forEach(element => {

        if (Object.values(element).join(' ').toLowerCase().includes(para.toLowerCase())) {
            // console.log(Object.values(element).join(' ').toLowerCase())
            var div = document.createElement('div');
            div.innerHTML = "<b>Name : </b>" + element["Name"].toUpperCase() + '<br>'
                    + "<b>Nobile Number : </b>" + element["MobileNumber"] + '<br>'
                    + "<b>Police Station  : </b>" + element["PoliceStation"] + '<br>'
                    + "<b>Nature of Duty : </b>" + element["NatureofDuty"] + '<br>'
                    + "<b>Area Allocated : </b>" + element["AreaAllocated"] + '<br>'
                    + "<b>Unit : </b>" + element["Unit"] + '<br>'
                    + "<b>Time : </b>" + moment(element["timestamp"]).format('Do MMM YYYY h:mm:ss a') +
                    '<br> <a href="history.html?vehicle=' + element["id"] + '">View History</a>' +
                    '<br> <a class="livechat" href="#" data-id="' + element["id"] + '">Live Chat</a>' + '<hr> '
            div.setAttribute("id", element["Name"].toUpperCase());
            div.setAttribute("class", "pointerclass");
            document.getElementById("searchlist").appendChild(div);

        }
    });
}
var chatid = null;
$('.btn-close').click(function () {
    chatid = null;
    $('.chat-container').css('visibility', 'hidden');
})

$(document).on('click', '.livechat', function (event) {
    event.preventDefault();
    var id = $(this).data('id');
    chatid = id;
    console.log(id)
    $('.chat-container').css('visibility', 'visible');
    const usersLocationhistory = ref(db, 'ChatHistory/' + id);
    onValue(usersLocationhistory, (snapshot) => {
        const data = snapshot.val();
        $('#devicename').text(s);
        let previousDate = null;
        // Clear existing messages
        $('.imessage').empty();

        for (const key in data) {
            if (Object.hasOwnProperty.call(data, key)) {
                const message = data[key];
                const timestamp = message['timemessage'];
                const messageDate = new Date(timestamp * 1000);
                const messageDateFormatted = messageDate.toISOString().substr(0, 10);
                if (messageDateFormatted !== previousDate) {
                    // Log the new date to the console
                    console.log(`New date: ${messageDateFormatted}`);
                    var newParagraph = $('<p>').addClass('center-date').text(messageDateFormatted);
                    var centerContainer = $('<div>').addClass('center-container').append(newParagraph);
                    $('.imessage').append(centerContainer);
                }
                if (data[key]['sentBy'] == 'client') {
                    // Create a new <p> element with the specified class and text content
                    var newParagraph = $('<p class="from-them">').text(data[key]['message']);
                    var formattedTime = new Date(data[key]['timemessage'] * 1000).toISOString().substr(11, 5);

                    var timestampSpan = $('<span class="from-them-timemessage">').text(formattedTime);

                    // Append the new <p> element to the element with the class "imessage"
                    $('.imessage').append(newParagraph);
                    newParagraph.after(timestampSpan);
                } else {
                    var newParagraph = $('<p class="from-me">').text(data[key]['message']);
                    var formattedTime = new Date(data[key]['timemessage'] * 1000).toISOString().substr(11, 5);

                    var timestampSpan = $('<span class="from-me-timemessage">').text(formattedTime);

                    // Append the new <p> element to the element with the class "imessage"
                    $('.imessage').append(newParagraph);
                    newParagraph.after(timestampSpan);
                }
                previousDate = messageDateFormatted;
            }
        }
        var chatWindow = $('.middle-section');
        chatWindow.scrollTop(chatWindow[0].scrollHeight);
    });
});

const params = new URLSearchParams(document.location.search);
const s = params.get("vehicle");

// Add an event listener to the Send button
$('#sendMessageButton').click(function () {
    sendMessage();
});

// Add an event listener to the messageInput div to detect Enter key press
$('#messageInput').keydown(function (event) {
    if (event.keyCode === 13) { // Check if the pressed key is Enter (key code 13)
        sendMessage();
    }
});
// Function to send the message
function sendMessage() {
    // Get the message from the input field
    var message = $('#messageInput').val();

    // Get the current timestamp in milliseconds since the Unix epoch
    var timestampInMillis = Date.now();

    // Get the timezone offset in minutes
    var timezoneOffsetInMinutes = new Date().getTimezoneOffset();

    // Convert the timezone offset to seconds and invert it to adjust the timestamp
    var timezoneOffsetInSeconds = timezoneOffsetInMinutes * 60 * -1;

    // Calculate the timestamp in seconds adjusted for the local timezone
    var timestampInSeconds = Math.floor((timestampInMillis + timezoneOffsetInSeconds * 1000) / 1000);



    // Log the message to the console
    var usersLocation = ref(db, 'ChatHistory/' + chatid); // Assuming 's' is your user identifier
    var usersLocation = ref(db, 'ChatHistory/' + chatid + '/' + timestampInSeconds); // Assuming 's' is your user identifier
    set(usersLocation, {
        message: message,
        sentBy: 'server', // Assuming messages are sent by the client
        timemessage: timestampInSeconds
    });

    // Clear the input field
    $('#messageInput').val('');
}
var chatHistoryRef = ref(db, 'ChatHistory/');

// Add a ValueEventListener to listen for changes in the data
onValue(chatHistoryRef, function (snapshot) {
    // Process the data as needed
    // For example, you can iterate over the children and extract messages
    snapshot.forEach(function (childSnapshot) {
        var currentTimeInSeconds = Math.floor((Date.now() - new Date().getTimezoneOffset() * 60 * 1000) / 1000);


        // Iterate over each key-value pair in the child snapshot
        Object.keys(childSnapshot.val()).forEach(function (timestamp) {
            // Convert the Unix timestamp to a JavaScript Date object
            var messageTime = parseInt(timestamp) ; // Convert seconds to milliseconds

            // Calculate the difference in seconds between the current time and the message time
            var differenceInSeconds = (currentTimeInSeconds - messageTime);

            // Check if the message was sent within the last 5 seconds
            if (differenceInSeconds <= 5 && childSnapshot.val()[timestamp]['sentBy'] == "client") {
                // Message was sent within the last 5 seconds
                var deviceName = "";
                
                vehicles.forEach(function (item) {
                    if (item.id === childSnapshot.key) {
                        deviceName = item.Name;
                    }
                });
                Snackbar.show({ text: '<strong>' + deviceName + " : </strong>" + childSnapshot.val()[timestamp]['message'], pos: 'top-right' });
                // console.log("Message sent within the last 5 seconds:", childSnapshot.val()[timestamp]['message'], deviceName);
            } 
        });
    });
}, function (error) {
    // Handle any errors that occur during the listener setup or data retrieval
    console.error("Error fetching data:", error);
});
